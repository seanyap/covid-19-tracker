{"version":3,"sources":["InfoBox.js","ChangeView.js","utils.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","ChangeView","center","zoom","useMap","setView","casesTypeColors","hex","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","todayCases","Popup","style","backgroundImage","flag","Map","countries","MapContainer","scrollWheelZoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","useEffect","fetch","then","response","json","chartData","lastDataPoint","date","newDataPoint","x","y","push","buildChartData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1695f0f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\n// after you write the core of a component, make sure to test it first by rending it in your page.\n// if you dont have your data or a specific feature yet, come up with your own data to test it out. DO NOT GO AND CODE THE REQUIRED FEATURE BEFORE TESTING\n// takes in props which we destructured into 3 variables\nfunction InfoBox({ title, cases, total }) {\n  return (\n    // make sure to assign each element a CSS BEM class names to style\n    // always keep in mind the UI of the app. use library like material-UI for pre-written styling to ensure you don't spend too much time tinkering with design\n    <Card className=\"infoBox\">\n      <CardContent>\n        {/* Title */}\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n\n        {/* +/-120k Number of cases */}\n        <h2 className=\"infobox__cases\">{cases}</h2>\n\n        {/* 1.2M Total */}\n        <Typography className=\"infobox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import { useMap } from \"react-leaflet\";\n\nfunction ChangeView({ center, zoom }) {\n  const map = useMap();\n  map.setView(center, zoom);\n  return null;\n}\n\nexport default ChangeView;\n","import React from \"react\"; // to use JSX\nimport numeral from \"numeral\"; // to format numbers\nimport { Circle, Popup } from \"react-leaflet\";\n\n// this file contains helper functions\n\nconst casesTypeColors = {\n  // this is a constant mappings of casesType: cases, recovered, and deaths to their individual assigned color\n  cases: {\n    hex: \"#CC1034\",\n  },\n  recovered: {\n    hex: \"#7DD71D\",\n  },\n  deaths: {\n    hex: \"#FB4443\",\n  },\n};\n\n// function expression\nexport const sortData = (data) => {\n  // split the data into individual items and put them in sortedData array\n  const sortedData = [...data];\n\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1; // -1 represents false\n    } else {\n      return 1; // 1 represents true\n    }\n  });\n  return sortedData;\n};\n\n// format the stats numbers to look good when displayed\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n// draw circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  // iterate through all countries in data\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={(country.cases / country.todayCases) * 300}\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\"; // to use jsx\nimport \"./Map.css\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport ChangeView from \"./ChangeView\";\nimport { showDataOnMap } from \"./utils\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <MapContainer center={center} zoom={zoom} scrollWheelZoom={false}>\n        {/* this is a component to llsten for changes in center and zoom and sets it because mapcontainer's center and zoom states are immutable  */}\n        <ChangeView center={center} zoom={zoom} />\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {/* loop through all countries and draw circles on map that depend on the number of covid cases; bigger circle = more cases */}\n        {showDataOnMap(countries, casesType)}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport \"./Table.css\";\n\n// destructure the props(an object) and get countries key\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {/* for every country in countries, call anonynous function and do some action */}\n      {/* destructure country and get keys: country and cases */}\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\n// customize configuration according to the options available on chartjs documentation\nconst options = {\n  // dont want legend to display\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        // don't show y axis gridlines\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nfunction LineGraph() {\n  // state\n  const [data, setData] = useState({});\n\n  // function to process data returned from API\n  const buildChartData = (data, casesType = \"cases\") => {\n    const chartData = [];\n    let lastDataPoint;\n\n    // process data to desired format\n    for (let date in data[casesType]) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n  };\n\n  // init code\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n      .then((response) => response.json())\n      .then((data) => {\n        const chartData = buildChartData(data);\n        setData(chartData);\n      });\n  }, []);\n\n  return (\n    <div>\n      {/* data? is optional chaining feature. handles error and returns undefined if data does not exist. the original way to do this would be data && data.length > 0 */}\n      {data?.length > 0 && (\n        <Line\n          options={options} // configurations for Line. read Chart.js documentation for more info\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import { useState, useEffect } from \"react\";\nimport {\n  FormControl,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\n// React componenets start with Capital letter\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport \"./App.css\";\nimport { sortData, prettyPrintStat } from \"./utils\"; // export returns an object; inside this object contains multiple keys to the function you wrote\nimport \"leaflet/dist/leaflet.css\";\n\n// App is a React component as well which is rendered by index.js\nfunction App() {\n  // React useState hook --> state management\n\n  const [countries, setCountries] = useState([]); // countries is an array that stores a list of objects which contain mappings of (name -> country) AND (value -> country-iso2)\n\n  const [country, setCountry] = useState(\"worldwide\"); // keep track of current selected country from dropdown list; default worldwide\n\n  const [countryInfo, setCountryInfo] = useState({}); // data based of current country\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([25.662357, -25.4796]);\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n\n  // init code\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => setCountryInfo(data));\n  }, []);\n\n  // React useEffect hook\n  // code inside anonymous func will run only once when the component loads AND if there's additional state in hook arg\n  useEffect(() => {\n    // async -> send a request, wait for it in a non-blocking way, then do something with the info\n    const getCountriesData = async () => {\n      // pull data(request object) from api service end point\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json()) // convert res obj to json type\n        .then((data) => {\n          // an array of country objects: 2 mappings: name and value\n          const countries = data.map((country) => ({\n            name: country.country, // United States\n            value: country.countryInfo.iso2, // US\n          }));\n\n          const sortedData = sortData(data);\n          // call function to change state instead of using assignment operator\n          setCountries(countries);\n          setTableData(sortedData);\n          setMapCountries(data);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  // this func is called by the event listener when the click event for the select element is triggered\n  const onCountryChange = async (event) => {\n    // get the value of the element that triggered the event\n    const countryCode = event.target.value;\n\n    // pull info from API service\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`; // determine which API endpoint to use\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data); // all of the data from the current country response\n\n        if (countryCode === \"worldwide\") {\n          setMapCenter([25.662357, -25.4796]);\n          setMapZoom(3);\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n        }\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        {/* <--- Components ---> */}\n        {/* Title and Select input dropdown */}\n        <div className=\"app__header\">\n          <h1>Covid-19-Tracker</h1>\n\n          <FormControl className=\"app__dropdown\">\n            {/* variant property is the look for the select box; value property is the value that the box display. we want the box to display the current selected country */}\n            {/* onChange property is the event listener. we need to add event listener to this select element to keep track of selected country */}\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\n              {/* 1. loop through all the countries that was pulled in from api service in useEffect hook */}\n              {/* 2. return a MenuItem component for each country */}\n              {/* JS code in HTML has to be in curly braces */}\n              {countries.map((country) => (\n                // value property is to assign a name to identify this particular element, when when it is selected you know which one\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/* Infoboxes */}\n        <div className=\"app__stats\">\n          {/* 3 of the same React components but with different React PROPS passed into it to make each component unique */}\n          {/* React components are SELF CLOSING */}\n          <InfoBox\n            title=\"Coronavirus cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        {/* Map */}\n        <Map countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          {/* Table */}\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n\n          {/* Graph */}\n          <h3>Worldwide new cases</h3>\n          <LineGraph />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}